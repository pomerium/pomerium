settings:
  - name: "Reports"
    settings:
      - name: "Traffic"
      - name: "Runtime"
      - name: "Sessions"
      - name: "Events"
      - name: "Deployments"
  - name: "Manage"
    settings:
      - name: "Routes"
        doc: |
          A Route provides access to a service through Pomerium.
        settings:
          - name: "General"
            doc: |
              The **General** tab defines the route path, both from the internet and to the internal service, and the policies attached. Note that policies enforced on a Namespace the Route resides in will also be applied.

              Several fields in the New Route View behave the same as their counterpoints in open-source Pomerium. See [Configuation Settings](/reference/) for more information on the following fields:
                - [From](/reference/#from)
                - [To](/reference/#to)
                - [Redirect](/reference/#redirect)
                - [Pass Identity Headers](/reference/#pass-identity-headers)
            settings:
              - name: "Name"
                doc: This value is only visible in the Console UI.
              - name: "Policies"
                doc: Add or remove Policies to be applied to the Route. Note that Policies enforced in the Route's Namespace will be applied automatically.
              - name: "Enable Google Cloud Serverless Authentication"
                doc: |
                  @Travis plz explain.
          - name: "Matchers"
            settings:
              - name: Path
                dupe: true
              - name: Prefix
                dupe: true
              - name: Regex
                dupe: true
          - name: "Rewrite"
          - name: "Timeouts"
          - name: "Headers"
          - name: "Load Balancer"
      - name: "Policies"
        keys: ["Policy"]
        doc: |
          A Policy defines what permissions a set of users or groups has. Policies are applied to Namespaces or Routes to associate the set of permissions with a service or set of service, completing the authentication model.

          ::: tip
          This is a separate concept from [policies](../reference/#policy) in the non-enterprise model. In open-source Pomerium, the `policy` block defines both routes and access.
          :::

          Policies can be constructed three ways:

          ### Web UI

          From the **BUILDER** tab, users can add allow or deny blocks to a policy, containing and/or/not/nor logic to allow or deny sets of users and groups.

          ![A policy being constructed in Pomerium Enterprise console allowing a single user access](../img/example-policy-single-user.png)

          ### Pomerium Policy Language
          
          From the **EDITOR** tab users can write policies in Pomerium Policy Language (**PPL**), a YAML-based notation.

          ![A policy as viewed from the editor tab](../img/example-policy-editor.png)

          ### Rego

          For those using [OPA](https://www.openpolicyagent.org/), the **REGO** tab will accept policies written in Rego.

          ::: tip
          A policy can only support PPL or Rego. Once one is set, the other tab is disabled.
          :::

          ### Overrides

          - **Any Authenticated User**: This setting will allow access to a route with this policy attached to any user who can authenticate to your Identity Provider (**IdP**).
          - **CORS Preflight**: 
          - **Public Access**: This setting allows complete, unrestricted access to an associated route. Use this setting with caution.
      - name: "Certificates"
  - name: "Configure"
    settings:
      - name: "User Impersonation"
        keys: ["user impersonation"]
        doc: |
          @travis fill me with delicious data!
      - name: "Settings"
        settings:
          - name: "Global"
          - name: "Cookies"
          - name: "Timeouts"
          - name: "GRPC"
          - name: "Tracing"
          - name: "Authenticate"
          - name: "Authorize"
          - name: "Proxy"
      - name: "Service Accounts"
        doc: |
          <!-- Explain Service Accounts -->
      - name: "Namespaces"
        keys: ["namespace"]
        doc: |
          A Namespace is a collection of users, groups, routes, and policies that allows system administrators to organize, manage, and delegate permissions across their infrastructure.
          
          - Policies can be optional or enforced on a Namespace, and they can be nested to create inheritance.
          - Users or groups can be granted permission to edit access to routes within a Namespace, allowing them self-serve access to the routes critical to their work.
