syntax = "proto3";

package client;

service Config {
  rpc List(ListConnectionsRequest) returns (ListConnectionsResponse);
  rpc Delete(DeleteConnectionsRequest) returns (DeleteConnectionsResponse);
  rpc UpsertConnection(ConnectionRecord) returns (ConnectionRecord);
  rpc Export(ExportRequest) returns (ConfigData);
  rpc Import(ImportRequest) returns (ImportResponse);
}

message ConnectionRecord {
  optional string id = 1;
  repeated tags = 2;
  // connection data may be omitted if i.e. just manipulating the tags data
  optional Connection conn = 3;
}

message ListConnectionsRequest {
  oneof {
    // only return connections matching a particular tag
    string tag = 1;
    // only return specific connection(s)
    repeated connection_ids = 2;
  }
}
message ListConnectionsResponse { repeated ConnectionRecords records = 1; }

message DeleteConnectionsRequest { repeated string connection_ids = 1; }
message DeleteConnectionsResponse {}

// Export dumps configuration (or subset of, based on provided tag filter)
// in the JSON format
message ExportRequest {
  // only export for a specific tag
  optional string tag = 1;
  // remove_tags to strip tags from output
  bool remove_tags = 2;
  enum Format {
    EXPORT_FORMAT_UNDEFINED = 0;
    EXPORT_FORMAT_JSON_COMPACT = 1;
    EXPORT_FORMAT_JSON_PRETTY = 2;
  }
  Format format = 1;
}

message ConfigData { bytes data = 1; }

// ImportRequest would consume the previously exported data back,
// merging it with existing configuration,
// and performing de-duplication of the records so that multiple imports would
// yield the same result
message ImportRequest {
  // if set, all connections would receive that tag instead
  optional string override_tag = 1;
  bytes data = 2;
}

message ImportResponse {}

// Listener service controls listeners
message service Listener {
  // Listen starts connection listener
  rpc Listen(ListenRequest) returns (ListenResponse);
  // Close closes listener
  rpc Close(CloseRequest) returns (CloseResponse);
  // StatusUpdates opens a stream to listen to connection status updates
  // a client has to subscribe and continuously
  // listen to the broadcasted updates
  rpc StatusUpdates(EventsRequest) returns (stream ConnectionStatusUpdates);
}

message ConnectRequest {
  oneof action {
    bool connect = 1;
    bool disconnect = 2;
  }
  // omit connection ids to connect all connections
  repeated string connection_ids = 3;
}
message ConnectionListenerStatus {
  oneof {
    // a port this connection listening on
    uint32 port = 1;
    // an error that has occured (i.e. cannot bind to requested host:port)
    string last_error = 2;
  }
}

// ConnectionStatusUpdates represent connection state changes
message ConnectionStatusUpdates {
  // connection this event relates to
  string connection_id = 1;
  // peer_addr represents connecting party remote address
  string peer_addr = 2;
  enum ConnectionStatus {
    CONNECTION_STATUS_UNDEFINED = 0;
    CONNECTION_STATUS_CONNECTING = 1;
    CONNECTION_STATUS_AUTH_REQUIRED = 3;
    CONNECTION_STATUS_CONNECTED = 2;
    CONNECTION_STATUS_DISCONNECTED = 3;
  }
  ConnectionStatus status = 2;
  // in case the connection failed or terminated, last error may be available
  optional string last_error = 3;
}

// ConnectionInfo represents a stored connection
message Connection {
  // name is a user friendly connection name that a user may define
  optional string name = 1;
  // remote_addr is a remote pomerium host:port
  string remote_addr = 2;
  // listen_address, if not provided, will assign a random port each time
  optional listen_addr = 3;
  oneof tls_options {
    bool disable_tls_verification = 4;
    bytes ca_cert = 5;
  }
}
