// Code generated by MockGen. DO NOT EDIT.
// Source: registry_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=registry_grpc.pb.go -destination ./mock_registry/registry.pb.go RegistryClient
//

// Package mock_registry is a generated GoMock package.
package mock_registry

import (
	context "context"
	reflect "reflect"

	registry "github.com/pomerium/pomerium/pkg/grpc/registry"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockRegistryClient is a mock of RegistryClient interface.
type MockRegistryClient struct {
	ctrl     *gomock.Controller
	recorder *MockRegistryClientMockRecorder
}

// MockRegistryClientMockRecorder is the mock recorder for MockRegistryClient.
type MockRegistryClientMockRecorder struct {
	mock *MockRegistryClient
}

// NewMockRegistryClient creates a new mock instance.
func NewMockRegistryClient(ctrl *gomock.Controller) *MockRegistryClient {
	mock := &MockRegistryClient{ctrl: ctrl}
	mock.recorder = &MockRegistryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistryClient) EXPECT() *MockRegistryClientMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockRegistryClient) List(ctx context.Context, in *registry.ListRequest, opts ...grpc.CallOption) (*registry.ServiceList, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*registry.ServiceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRegistryClientMockRecorder) List(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRegistryClient)(nil).List), varargs...)
}

// Report mocks base method.
func (m *MockRegistryClient) Report(ctx context.Context, in *registry.RegisterRequest, opts ...grpc.CallOption) (*registry.RegisterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Report", varargs...)
	ret0, _ := ret[0].(*registry.RegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Report indicates an expected call of Report.
func (mr *MockRegistryClientMockRecorder) Report(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Report", reflect.TypeOf((*MockRegistryClient)(nil).Report), varargs...)
}

// Watch mocks base method.
func (m *MockRegistryClient) Watch(ctx context.Context, in *registry.ListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[registry.ServiceList], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Watch", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[registry.ServiceList])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockRegistryClientMockRecorder) Watch(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockRegistryClient)(nil).Watch), varargs...)
}

// MockRegistryServer is a mock of RegistryServer interface.
type MockRegistryServer struct {
	ctrl     *gomock.Controller
	recorder *MockRegistryServerMockRecorder
}

// MockRegistryServerMockRecorder is the mock recorder for MockRegistryServer.
type MockRegistryServerMockRecorder struct {
	mock *MockRegistryServer
}

// NewMockRegistryServer creates a new mock instance.
func NewMockRegistryServer(ctrl *gomock.Controller) *MockRegistryServer {
	mock := &MockRegistryServer{ctrl: ctrl}
	mock.recorder = &MockRegistryServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistryServer) EXPECT() *MockRegistryServerMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockRegistryServer) List(arg0 context.Context, arg1 *registry.ListRequest) (*registry.ServiceList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*registry.ServiceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRegistryServerMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRegistryServer)(nil).List), arg0, arg1)
}

// Report mocks base method.
func (m *MockRegistryServer) Report(arg0 context.Context, arg1 *registry.RegisterRequest) (*registry.RegisterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Report", arg0, arg1)
	ret0, _ := ret[0].(*registry.RegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Report indicates an expected call of Report.
func (mr *MockRegistryServerMockRecorder) Report(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Report", reflect.TypeOf((*MockRegistryServer)(nil).Report), arg0, arg1)
}

// Watch mocks base method.
func (m *MockRegistryServer) Watch(arg0 *registry.ListRequest, arg1 grpc.ServerStreamingServer[registry.ServiceList]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Watch indicates an expected call of Watch.
func (mr *MockRegistryServerMockRecorder) Watch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockRegistryServer)(nil).Watch), arg0, arg1)
}

// MockUnsafeRegistryServer is a mock of UnsafeRegistryServer interface.
type MockUnsafeRegistryServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeRegistryServerMockRecorder
}

// MockUnsafeRegistryServerMockRecorder is the mock recorder for MockUnsafeRegistryServer.
type MockUnsafeRegistryServerMockRecorder struct {
	mock *MockUnsafeRegistryServer
}

// NewMockUnsafeRegistryServer creates a new mock instance.
func NewMockUnsafeRegistryServer(ctrl *gomock.Controller) *MockUnsafeRegistryServer {
	mock := &MockUnsafeRegistryServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeRegistryServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeRegistryServer) EXPECT() *MockUnsafeRegistryServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedRegistryServer mocks base method.
func (m *MockUnsafeRegistryServer) mustEmbedUnimplementedRegistryServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedRegistryServer")
}

// mustEmbedUnimplementedRegistryServer indicates an expected call of mustEmbedUnimplementedRegistryServer.
func (mr *MockUnsafeRegistryServerMockRecorder) mustEmbedUnimplementedRegistryServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedRegistryServer", reflect.TypeOf((*MockUnsafeRegistryServer)(nil).mustEmbedUnimplementedRegistryServer))
}
