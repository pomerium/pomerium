// Code generated by MockGen. DO NOT EDIT.
// Source: databroker_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=databroker_grpc.pb.go -destination ./mock_databroker/databroker.pb.go DataBrokerServiceClient
//

// Package mock_databroker is a generated GoMock package.
package mock_databroker

import (
	context "context"
	reflect "reflect"

	databroker "github.com/pomerium/pomerium/pkg/grpc/databroker"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockDataBrokerServiceClient is a mock of DataBrokerServiceClient interface.
type MockDataBrokerServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockDataBrokerServiceClientMockRecorder
}

// MockDataBrokerServiceClientMockRecorder is the mock recorder for MockDataBrokerServiceClient.
type MockDataBrokerServiceClientMockRecorder struct {
	mock *MockDataBrokerServiceClient
}

// NewMockDataBrokerServiceClient creates a new mock instance.
func NewMockDataBrokerServiceClient(ctrl *gomock.Controller) *MockDataBrokerServiceClient {
	mock := &MockDataBrokerServiceClient{ctrl: ctrl}
	mock.recorder = &MockDataBrokerServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataBrokerServiceClient) EXPECT() *MockDataBrokerServiceClientMockRecorder {
	return m.recorder
}

// AcquireLease mocks base method.
func (m *MockDataBrokerServiceClient) AcquireLease(ctx context.Context, in *databroker.AcquireLeaseRequest, opts ...grpc.CallOption) (*databroker.AcquireLeaseResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AcquireLease", varargs...)
	ret0, _ := ret[0].(*databroker.AcquireLeaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcquireLease indicates an expected call of AcquireLease.
func (mr *MockDataBrokerServiceClientMockRecorder) AcquireLease(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquireLease", reflect.TypeOf((*MockDataBrokerServiceClient)(nil).AcquireLease), varargs...)
}

// Get mocks base method.
func (m *MockDataBrokerServiceClient) Get(ctx context.Context, in *databroker.GetRequest, opts ...grpc.CallOption) (*databroker.GetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*databroker.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDataBrokerServiceClientMockRecorder) Get(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDataBrokerServiceClient)(nil).Get), varargs...)
}

// ListTypes mocks base method.
func (m *MockDataBrokerServiceClient) ListTypes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*databroker.ListTypesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTypes", varargs...)
	ret0, _ := ret[0].(*databroker.ListTypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTypes indicates an expected call of ListTypes.
func (mr *MockDataBrokerServiceClientMockRecorder) ListTypes(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTypes", reflect.TypeOf((*MockDataBrokerServiceClient)(nil).ListTypes), varargs...)
}

// Patch mocks base method.
func (m *MockDataBrokerServiceClient) Patch(ctx context.Context, in *databroker.PatchRequest, opts ...grpc.CallOption) (*databroker.PatchResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*databroker.PatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockDataBrokerServiceClientMockRecorder) Patch(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockDataBrokerServiceClient)(nil).Patch), varargs...)
}

// Put mocks base method.
func (m *MockDataBrokerServiceClient) Put(ctx context.Context, in *databroker.PutRequest, opts ...grpc.CallOption) (*databroker.PutResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Put", varargs...)
	ret0, _ := ret[0].(*databroker.PutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockDataBrokerServiceClientMockRecorder) Put(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockDataBrokerServiceClient)(nil).Put), varargs...)
}

// Query mocks base method.
func (m *MockDataBrokerServiceClient) Query(ctx context.Context, in *databroker.QueryRequest, opts ...grpc.CallOption) (*databroker.QueryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(*databroker.QueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockDataBrokerServiceClientMockRecorder) Query(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockDataBrokerServiceClient)(nil).Query), varargs...)
}

// ReleaseLease mocks base method.
func (m *MockDataBrokerServiceClient) ReleaseLease(ctx context.Context, in *databroker.ReleaseLeaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReleaseLease", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleaseLease indicates an expected call of ReleaseLease.
func (mr *MockDataBrokerServiceClientMockRecorder) ReleaseLease(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseLease", reflect.TypeOf((*MockDataBrokerServiceClient)(nil).ReleaseLease), varargs...)
}

// RenewLease mocks base method.
func (m *MockDataBrokerServiceClient) RenewLease(ctx context.Context, in *databroker.RenewLeaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RenewLease", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenewLease indicates an expected call of RenewLease.
func (mr *MockDataBrokerServiceClientMockRecorder) RenewLease(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewLease", reflect.TypeOf((*MockDataBrokerServiceClient)(nil).RenewLease), varargs...)
}

// SetOptions mocks base method.
func (m *MockDataBrokerServiceClient) SetOptions(ctx context.Context, in *databroker.SetOptionsRequest, opts ...grpc.CallOption) (*databroker.SetOptionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetOptions", varargs...)
	ret0, _ := ret[0].(*databroker.SetOptionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetOptions indicates an expected call of SetOptions.
func (mr *MockDataBrokerServiceClientMockRecorder) SetOptions(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOptions", reflect.TypeOf((*MockDataBrokerServiceClient)(nil).SetOptions), varargs...)
}

// Sync mocks base method.
func (m *MockDataBrokerServiceClient) Sync(ctx context.Context, in *databroker.SyncRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[databroker.SyncResponse], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Sync", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[databroker.SyncResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sync indicates an expected call of Sync.
func (mr *MockDataBrokerServiceClientMockRecorder) Sync(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockDataBrokerServiceClient)(nil).Sync), varargs...)
}

// SyncLatest mocks base method.
func (m *MockDataBrokerServiceClient) SyncLatest(ctx context.Context, in *databroker.SyncLatestRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[databroker.SyncLatestResponse], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SyncLatest", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[databroker.SyncLatestResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncLatest indicates an expected call of SyncLatest.
func (mr *MockDataBrokerServiceClientMockRecorder) SyncLatest(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncLatest", reflect.TypeOf((*MockDataBrokerServiceClient)(nil).SyncLatest), varargs...)
}

// MockDataBrokerServiceServer is a mock of DataBrokerServiceServer interface.
type MockDataBrokerServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockDataBrokerServiceServerMockRecorder
}

// MockDataBrokerServiceServerMockRecorder is the mock recorder for MockDataBrokerServiceServer.
type MockDataBrokerServiceServerMockRecorder struct {
	mock *MockDataBrokerServiceServer
}

// NewMockDataBrokerServiceServer creates a new mock instance.
func NewMockDataBrokerServiceServer(ctrl *gomock.Controller) *MockDataBrokerServiceServer {
	mock := &MockDataBrokerServiceServer{ctrl: ctrl}
	mock.recorder = &MockDataBrokerServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataBrokerServiceServer) EXPECT() *MockDataBrokerServiceServerMockRecorder {
	return m.recorder
}

// AcquireLease mocks base method.
func (m *MockDataBrokerServiceServer) AcquireLease(arg0 context.Context, arg1 *databroker.AcquireLeaseRequest) (*databroker.AcquireLeaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcquireLease", arg0, arg1)
	ret0, _ := ret[0].(*databroker.AcquireLeaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcquireLease indicates an expected call of AcquireLease.
func (mr *MockDataBrokerServiceServerMockRecorder) AcquireLease(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquireLease", reflect.TypeOf((*MockDataBrokerServiceServer)(nil).AcquireLease), arg0, arg1)
}

// Get mocks base method.
func (m *MockDataBrokerServiceServer) Get(arg0 context.Context, arg1 *databroker.GetRequest) (*databroker.GetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*databroker.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDataBrokerServiceServerMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDataBrokerServiceServer)(nil).Get), arg0, arg1)
}

// ListTypes mocks base method.
func (m *MockDataBrokerServiceServer) ListTypes(arg0 context.Context, arg1 *emptypb.Empty) (*databroker.ListTypesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTypes", arg0, arg1)
	ret0, _ := ret[0].(*databroker.ListTypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTypes indicates an expected call of ListTypes.
func (mr *MockDataBrokerServiceServerMockRecorder) ListTypes(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTypes", reflect.TypeOf((*MockDataBrokerServiceServer)(nil).ListTypes), arg0, arg1)
}

// Patch mocks base method.
func (m *MockDataBrokerServiceServer) Patch(arg0 context.Context, arg1 *databroker.PatchRequest) (*databroker.PatchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", arg0, arg1)
	ret0, _ := ret[0].(*databroker.PatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockDataBrokerServiceServerMockRecorder) Patch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockDataBrokerServiceServer)(nil).Patch), arg0, arg1)
}

// Put mocks base method.
func (m *MockDataBrokerServiceServer) Put(arg0 context.Context, arg1 *databroker.PutRequest) (*databroker.PutResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", arg0, arg1)
	ret0, _ := ret[0].(*databroker.PutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockDataBrokerServiceServerMockRecorder) Put(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockDataBrokerServiceServer)(nil).Put), arg0, arg1)
}

// Query mocks base method.
func (m *MockDataBrokerServiceServer) Query(arg0 context.Context, arg1 *databroker.QueryRequest) (*databroker.QueryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", arg0, arg1)
	ret0, _ := ret[0].(*databroker.QueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockDataBrokerServiceServerMockRecorder) Query(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockDataBrokerServiceServer)(nil).Query), arg0, arg1)
}

// ReleaseLease mocks base method.
func (m *MockDataBrokerServiceServer) ReleaseLease(arg0 context.Context, arg1 *databroker.ReleaseLeaseRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseLease", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleaseLease indicates an expected call of ReleaseLease.
func (mr *MockDataBrokerServiceServerMockRecorder) ReleaseLease(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseLease", reflect.TypeOf((*MockDataBrokerServiceServer)(nil).ReleaseLease), arg0, arg1)
}

// RenewLease mocks base method.
func (m *MockDataBrokerServiceServer) RenewLease(arg0 context.Context, arg1 *databroker.RenewLeaseRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenewLease", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenewLease indicates an expected call of RenewLease.
func (mr *MockDataBrokerServiceServerMockRecorder) RenewLease(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewLease", reflect.TypeOf((*MockDataBrokerServiceServer)(nil).RenewLease), arg0, arg1)
}

// SetOptions mocks base method.
func (m *MockDataBrokerServiceServer) SetOptions(arg0 context.Context, arg1 *databroker.SetOptionsRequest) (*databroker.SetOptionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOptions", arg0, arg1)
	ret0, _ := ret[0].(*databroker.SetOptionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetOptions indicates an expected call of SetOptions.
func (mr *MockDataBrokerServiceServerMockRecorder) SetOptions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOptions", reflect.TypeOf((*MockDataBrokerServiceServer)(nil).SetOptions), arg0, arg1)
}

// Sync mocks base method.
func (m *MockDataBrokerServiceServer) Sync(arg0 *databroker.SyncRequest, arg1 grpc.ServerStreamingServer[databroker.SyncResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockDataBrokerServiceServerMockRecorder) Sync(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockDataBrokerServiceServer)(nil).Sync), arg0, arg1)
}

// SyncLatest mocks base method.
func (m *MockDataBrokerServiceServer) SyncLatest(arg0 *databroker.SyncLatestRequest, arg1 grpc.ServerStreamingServer[databroker.SyncLatestResponse]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncLatest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncLatest indicates an expected call of SyncLatest.
func (mr *MockDataBrokerServiceServerMockRecorder) SyncLatest(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncLatest", reflect.TypeOf((*MockDataBrokerServiceServer)(nil).SyncLatest), arg0, arg1)
}

// MockUnsafeDataBrokerServiceServer is a mock of UnsafeDataBrokerServiceServer interface.
type MockUnsafeDataBrokerServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeDataBrokerServiceServerMockRecorder
}

// MockUnsafeDataBrokerServiceServerMockRecorder is the mock recorder for MockUnsafeDataBrokerServiceServer.
type MockUnsafeDataBrokerServiceServerMockRecorder struct {
	mock *MockUnsafeDataBrokerServiceServer
}

// NewMockUnsafeDataBrokerServiceServer creates a new mock instance.
func NewMockUnsafeDataBrokerServiceServer(ctrl *gomock.Controller) *MockUnsafeDataBrokerServiceServer {
	mock := &MockUnsafeDataBrokerServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeDataBrokerServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeDataBrokerServiceServer) EXPECT() *MockUnsafeDataBrokerServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedDataBrokerServiceServer mocks base method.
func (m *MockUnsafeDataBrokerServiceServer) mustEmbedUnimplementedDataBrokerServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDataBrokerServiceServer")
}

// mustEmbedUnimplementedDataBrokerServiceServer indicates an expected call of mustEmbedUnimplementedDataBrokerServiceServer.
func (mr *MockUnsafeDataBrokerServiceServerMockRecorder) mustEmbedUnimplementedDataBrokerServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDataBrokerServiceServer", reflect.TypeOf((*MockUnsafeDataBrokerServiceServer)(nil).mustEmbedUnimplementedDataBrokerServiceServer))
}
