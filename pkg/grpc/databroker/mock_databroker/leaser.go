// Code generated by MockGen. DO NOT EDIT.
// Source: leaser.go

// Package mock_databroker is a generated GoMock package.
package mock_databroker

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	databroker "github.com/pomerium/pomerium/pkg/grpc/databroker"
)

// MockLeaserHandler is a mock of LeaserHandler interface.
type MockLeaserHandler struct {
	ctrl     *gomock.Controller
	recorder *MockLeaserHandlerMockRecorder
}

// MockLeaserHandlerMockRecorder is the mock recorder for MockLeaserHandler.
type MockLeaserHandlerMockRecorder struct {
	mock *MockLeaserHandler
}

// NewMockLeaserHandler creates a new mock instance.
func NewMockLeaserHandler(ctrl *gomock.Controller) *MockLeaserHandler {
	mock := &MockLeaserHandler{ctrl: ctrl}
	mock.recorder = &MockLeaserHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeaserHandler) EXPECT() *MockLeaserHandlerMockRecorder {
	return m.recorder
}

// GetDataBrokerServiceClient mocks base method.
func (m *MockLeaserHandler) GetDataBrokerServiceClient() databroker.DataBrokerServiceClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataBrokerServiceClient")
	ret0, _ := ret[0].(databroker.DataBrokerServiceClient)
	return ret0
}

// GetDataBrokerServiceClient indicates an expected call of GetDataBrokerServiceClient.
func (mr *MockLeaserHandlerMockRecorder) GetDataBrokerServiceClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataBrokerServiceClient", reflect.TypeOf((*MockLeaserHandler)(nil).GetDataBrokerServiceClient))
}

// RunLeased mocks base method.
func (m *MockLeaserHandler) RunLeased(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunLeased", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunLeased indicates an expected call of RunLeased.
func (mr *MockLeaserHandlerMockRecorder) RunLeased(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunLeased", reflect.TypeOf((*MockLeaserHandler)(nil).RunLeased), ctx)
}
