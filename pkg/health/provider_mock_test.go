// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pomerium/pomerium/pkg/health (interfaces: Provider)
//
// Generated by this command:
//
//	mockgen -package health_test -destination provider_mock_test.go github.com/pomerium/pomerium/pkg/health Provider
//

// Package health_test is a generated GoMock package.
package health_test

import (
	reflect "reflect"

	health "github.com/pomerium/pomerium/pkg/health"
	gomock "go.uber.org/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
	isgomock struct{}
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// ReportError mocks base method.
func (m *MockProvider) ReportError(check health.Check, err error, attributes ...health.Attr) {
	m.ctrl.T.Helper()
	varargs := []any{check, err}
	for _, a := range attributes {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ReportError", varargs...)
}

// ReportError indicates an expected call of ReportError.
func (mr *MockProviderMockRecorder) ReportError(check, err any, attributes ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{check, err}, attributes...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportError", reflect.TypeOf((*MockProvider)(nil).ReportError), varargs...)
}

// ReportOK mocks base method.
func (m *MockProvider) ReportOK(check health.Check, attributes ...health.Attr) {
	m.ctrl.T.Helper()
	varargs := []any{check}
	for _, a := range attributes {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ReportOK", varargs...)
}

// ReportOK indicates an expected call of ReportOK.
func (mr *MockProviderMockRecorder) ReportOK(check any, attributes ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{check}, attributes...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportOK", reflect.TypeOf((*MockProvider)(nil).ReportOK), varargs...)
}
