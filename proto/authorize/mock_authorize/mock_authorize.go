// Code generated by MockGen. DO NOT EDIT.
// Source: proto/authorize/authorize.pb.go

// Package mock_authorize is a generated GoMock package.
package mock_authorize

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	"github.com/pomerium/pomerium/proto/authorize"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// MockAuthorizerClient is a mock of AuthorizerClient interface
type MockAuthorizerClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizerClientMockRecorder
}

// MockAuthorizerClientMockRecorder is the mock recorder for MockAuthorizerClient
type MockAuthorizerClientMockRecorder struct {
	mock *MockAuthorizerClient
}

// NewMockAuthorizerClient creates a new mock instance
func NewMockAuthorizerClient(ctrl *gomock.Controller) *MockAuthorizerClient {
	mock := &MockAuthorizerClient{ctrl: ctrl}
	mock.recorder = &MockAuthorizerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthorizerClient) EXPECT() *MockAuthorizerClientMockRecorder {
	return m.recorder
}

// Authorize mocks base method
func (m *MockAuthorizerClient) Authorize(ctx context.Context, in *authorize.Identity, opts ...grpc.CallOption) (*authorize.AuthorizeReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Authorize", varargs...)
	ret0, _ := ret[0].(*authorize.AuthorizeReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorize indicates an expected call of Authorize
func (mr *MockAuthorizerClientMockRecorder) Authorize(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockAuthorizerClient)(nil).Authorize), varargs...)
}

// IsAdmin mocks base method
func (m *MockAuthorizerClient) IsAdmin(ctx context.Context, in *authorize.Identity, opts ...grpc.CallOption) (*authorize.IsAdminReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsAdmin", varargs...)
	ret0, _ := ret[0].(*authorize.IsAdminReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAdmin indicates an expected call of IsAdmin
func (mr *MockAuthorizerClientMockRecorder) IsAdmin(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAdmin", reflect.TypeOf((*MockAuthorizerClient)(nil).IsAdmin), varargs...)
}

// MockAuthorizerServer is a mock of AuthorizerServer interface
type MockAuthorizerServer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizerServerMockRecorder
}

// MockAuthorizerServerMockRecorder is the mock recorder for MockAuthorizerServer
type MockAuthorizerServerMockRecorder struct {
	mock *MockAuthorizerServer
}

// NewMockAuthorizerServer creates a new mock instance
func NewMockAuthorizerServer(ctrl *gomock.Controller) *MockAuthorizerServer {
	mock := &MockAuthorizerServer{ctrl: ctrl}
	mock.recorder = &MockAuthorizerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthorizerServer) EXPECT() *MockAuthorizerServerMockRecorder {
	return m.recorder
}

// Authorize mocks base method
func (m *MockAuthorizerServer) Authorize(arg0 context.Context, arg1 *authorize.Identity) (*authorize.AuthorizeReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", arg0, arg1)
	ret0, _ := ret[0].(*authorize.AuthorizeReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorize indicates an expected call of Authorize
func (mr *MockAuthorizerServerMockRecorder) Authorize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockAuthorizerServer)(nil).Authorize), arg0, arg1)
}

// IsAdmin mocks base method
func (m *MockAuthorizerServer) IsAdmin(arg0 context.Context, arg1 *authorize.Identity) (*authorize.IsAdminReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAdmin", arg0, arg1)
	ret0, _ := ret[0].(*authorize.IsAdminReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAdmin indicates an expected call of IsAdmin
func (mr *MockAuthorizerServerMockRecorder) IsAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAdmin", reflect.TypeOf((*MockAuthorizerServer)(nil).IsAdmin), arg0, arg1)
}
